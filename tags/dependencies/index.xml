<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dependencies on Carlos Buenosvinos</title>
    <link>https://carlosbuenosvinos.com/tags/dependencies/</link>
    <description>Recent content in dependencies on Carlos Buenosvinos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Feb 2017 09:30:28 +0000</lastBuildDate>
    
	<atom:link href="https://carlosbuenosvinos.com/tags/dependencies/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rigor Talks – PHP – #17 – Refactor Use Case V (Spanish)</title>
      <link>https://carlosbuenosvinos.com/rigor-talks-php-17-refactor-use-case-v-spanish/</link>
      <pubDate>Tue, 28 Feb 2017 09:30:28 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/rigor-talks-php-17-refactor-use-case-v-spanish/</guid>
      <description>&lt;p&gt;Hola Amigos del Rigor! Seguimos con la serie sobre los videos de refactoring. Los Application Services deben coordinar pero no contener lógica de negocio. En este video, veremos varios trucos para mover la lógica de negocio del Application Service hacia Entidades y Repositorios.&lt;/p&gt;

&lt;p&gt;He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfgj7DYkKH3Cd8bdu5SIHGYXh_bPV2idP&#34; target=&#34;_blank&#34;&gt;aquí&lt;/a&gt;. Si los videos os gustan, no olvidéis suscribiros a mi canal. Espero que os guste!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#MayTheRigorBeWithYou&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rigor Talks – PHP – #16 – Refactor Use Case IV (Spanish)</title>
      <link>https://carlosbuenosvinos.com/rigor-talks-php-16-refactor-use-case-iv-spanish/</link>
      <pubDate>Thu, 23 Feb 2017 09:32:29 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/rigor-talks-php-16-refactor-use-case-iv-spanish/</guid>
      <description>&lt;p&gt;Hola Amigos del Rigor! Seguimos con la serie sobre los videos de refactoring. En éste, vamos a mejorar la calidad de los tests unitarios acabando de agregar _assests_ que faltaban e introduciendo un &lt;em&gt;Spy.&lt;/em&gt; Con esto, nos aseguraremos que aún teniendo 100% de cobertura en los tests, tenemos que esta atentos a invocaciones que no tienen retorno, como logging, notifiers, publishers de eventos, etc.&lt;/p&gt;

&lt;p&gt;He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfgj7DYkKH3Cd8bdu5SIHGYXh_bPV2idP&#34; target=&#34;_blank&#34;&gt;aquí&lt;/a&gt;. Espero que os guste!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#MayTheRigorBeWithYou&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rigor Talks – PHP – #15 – Refactor Use Case III (Spanish)</title>
      <link>https://carlosbuenosvinos.com/rigor-talks-php-15-refactor-use-case-iii-spanish/</link>
      <pubDate>Tue, 14 Feb 2017 09:30:19 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/rigor-talks-php-15-refactor-use-case-iii-spanish/</guid>
      <description>&lt;p&gt;Hola Amigos del Rigor! Seguimos con la serie sobre los videos de refactoring. En éste, vamos a acabar de testear por completo todo el Application Service del &lt;a href=&#34;https://carlosbuenosvinos.com/rigor-talks-php-13-refactor-use-case-i-spanish/&#34; target=&#34;_blank&#34;&gt;video anterior&lt;/a&gt; utilizando técnicas que vimos en los videos anteriores como &lt;a href=&#34;https://carlosbuenosvinos.com/rigor-talks-php-7-test-class-spanish/&#34; target=&#34;_blank&#34;&gt;Test Classes&lt;/a&gt; o &lt;a href=&#34;https://carlosbuenosvinos.com/rigor-talks-php-8-self-shunt-spanish/&#34; target=&#34;_blank&#34;&gt;Self-Shunt&lt;/a&gt;. En el siguiente video veremos cómo enriquecer nuestro dominio moviendo parte de la lógica a las entidades.&lt;/p&gt;

&lt;p&gt;He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfgj7DYkKH3Cd8bdu5SIHGYXh_bPV2idP&#34; target=&#34;_blank&#34;&gt;aquí&lt;/a&gt;. Espero que os guste!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#MayTheRigorBeWithYou&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rigor Talks – PHP – #14 – Refactor Use Case II (Spanish)</title>
      <link>https://carlosbuenosvinos.com/rigor-talks-php-14-refactor-use-case-ii-spanish/</link>
      <pubDate>Tue, 07 Feb 2017 09:30:36 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/rigor-talks-php-14-refactor-use-case-ii-spanish/</guid>
      <description>&lt;p&gt;Hola Amigos del Rigor! Seguimos con la serie sobre los videos de refactoring. En éste, vamos a testear parte del Application Service que extrajimos en el &lt;a href=&#34;https://carlosbuenosvinos.com/rigor-talks-php-13-refactor-use-case-i-spanish/&#34; target=&#34;_blank&#34;&gt;video anterior&lt;/a&gt;. Aprovecharemos para mejorar el código con algunos casos no contemplados en el código original.&lt;/p&gt;

&lt;p&gt;He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfgj7DYkKH3Cd8bdu5SIHGYXh_bPV2idP&#34; target=&#34;_blank&#34;&gt;aquí&lt;/a&gt;. Espero que os guste!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#MayTheRigorBeWithYou&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rigor Talks – PHP – #13 – Refactor Use Case I (Spanish)</title>
      <link>https://carlosbuenosvinos.com/rigor-talks-php-13-refactor-use-case-i-spanish/</link>
      <pubDate>Tue, 31 Jan 2017 09:30:24 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/rigor-talks-php-13-refactor-use-case-i-spanish/</guid>
      <description>&lt;p&gt;Hola Amigos del Rigor! Hoy es mi cumpleaños, 34 primaveras. He traído donuts a la oficina, pero como no podéis acceder a ellos :(, aquí os dejo un regalito para vosotros! Arranco una nueva serie de videos sobre Refactoring de código acoplado. En este video, vamos a ver cómo refactorizar código escrito directamente en el controlador web de cualquier framework donde se mezcla lógica de negocio y detalles de infraestructura.&lt;/p&gt;

&lt;p&gt;Lo sacaremos a un Application Service, invertiremos todas las dependencias y lo dejaremos listo para poderlo testear.&lt;/p&gt;

&lt;p&gt;He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;a href=&#34;https://www.youtube.com/playlist?list=PLfgj7DYkKH3Cd8bdu5SIHGYXh_bPV2idP&#34; target=&#34;_blank&#34;&gt;aquí&lt;/a&gt;. Espero que os guste!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#MayTheRigorBeWithYou&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Working at the same time in a project and its dependencies: Composer and path type repository</title>
      <link>https://carlosbuenosvinos.com/working-at-the-same-time-in-a-project-and-its-dependencies-composer-and-path-type-repository/</link>
      <pubDate>Thu, 24 Mar 2016 15:36:10 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.com/working-at-the-same-time-in-a-project-and-its-dependencies-composer-and-path-type-repository/</guid>
      <description>&lt;p&gt;With the Domain-Driven Design, Microservices and API explosion, I see more teams working in a base project, such as a Web, and integrating other private packages they develop in a different repository. For example, working on the Web and an API client for a external REST service at the same time.&lt;/p&gt;

&lt;p&gt;For example, at @AtrapaloEng, our sales development team (checkout process, purchases, orders, payments, etc.) integrates different payment methods into the web so users, specially Latam ones, can be happier using their preferred payment methods. They create a repository for each of the new payment methods we support as a external package. Sometimes a developer in the team must work with different projects at the same time, the Web and the payment method in development.&lt;/p&gt;

&lt;p&gt;In this scenario, one option is work on the payment package, tag, push, go to the base project and update dependencies with Composer. As you can see, it&amp;#8217;s a bit slower, how we can improve this process? Composer to the rescue!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>