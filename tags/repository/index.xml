<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>repository on Carlos Buenosvinos</title><link>https://carlosbuenosvinos.com/tags/repository/</link><description>Recent content in repository on Carlos Buenosvinos</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Mar 2017 09:30:55 +0000</lastBuildDate><atom:link href="https://carlosbuenosvinos.com/tags/repository/index.xml" rel="self" type="application/rss+xml"/><item><title>Rigor Talks – PHP – #18 – Tell-Don’t-Ask (Spanish)</title><link>https://carlosbuenosvinos.com/rigor-talks-php-18-tell-dont-ask-spanish/</link><pubDate>Tue, 07 Mar 2017 09:30:55 +0000</pubDate><guid>https://carlosbuenosvinos.com/rigor-talks-php-18-tell-dont-ask-spanish/</guid><description>&lt;p>Hola Amigos del Rigor! Hacemos un parada en la serie de los videos sobre refactoring para explicar el principio de Tell-Don’t-Ask. Lo hemos ido utilizando en los videos anteriores pero no lo había presentado formalmente.&lt;/p>
&lt;p>He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;!-- raw HTML omitted -->aquí&lt;!-- raw HTML omitted -->. Si los videos os gustan, no olvidéis suscribiros a mi canal. Espero que os guste!&lt;/p>
&lt;blockquote>
&lt;p>#MayTheRigorBeWithYou&lt;/p>
&lt;/blockquote></description></item><item><title>Rigor Talks – PHP – #17 – Refactor Use Case V (Spanish)</title><link>https://carlosbuenosvinos.com/rigor-talks-php-17-refactor-use-case-v-spanish/</link><pubDate>Tue, 28 Feb 2017 09:30:28 +0000</pubDate><guid>https://carlosbuenosvinos.com/rigor-talks-php-17-refactor-use-case-v-spanish/</guid><description>&lt;p>Hola Amigos del Rigor! Seguimos con la serie sobre los videos de refactoring. Los Application Services deben coordinar pero no contener lógica de negocio. En este video, veremos varios trucos para mover la lógica de negocio del Application Service hacia Entidades y Repositorios.&lt;/p>
&lt;p>He creado una lista de reproducción pública con los videos que vaya publicando. La podéis encontrar &lt;!-- raw HTML omitted -->aquí&lt;!-- raw HTML omitted -->. Si los videos os gustan, no olvidéis suscribiros a mi canal. Espero que os guste!&lt;/p>
&lt;blockquote>
&lt;p>#MayTheRigorBeWithYou&lt;/p>
&lt;/blockquote></description></item><item><title>Firing Domain Events in the __constructor</title><link>https://carlosbuenosvinos.com/firing-domain-events-in-the-__constructor/</link><pubDate>Thu, 24 Nov 2016 13:24:02 +0000</pubDate><guid>https://carlosbuenosvinos.com/firing-domain-events-in-the-__constructor/</guid><description>&lt;p>After my post about &lt;!-- raw HTML omitted -->“Good ORMs do not call __construct a.k.a. where to fire my Domain Events”&lt;!-- raw HTML omitted -->, nice discussions (and trolling) are happening in the Barcelona Engineering Slack Channel. &lt;strong>Thanks to everyone for the feedback, ideas and concerns. You are more than welcome!&lt;/strong> The main concerns are:&lt;/p>
&lt;ol>
&lt;li>How do I fetch an Entity from ElasticSearch, using new and without firing the Event?&lt;/li>
&lt;li>How do I create stubs on the Entity that is firing the Domain Event?&lt;/li>
&lt;li>What are pros and cons of firing the Domain Event in the __constructor or in the named constructor?&lt;/li>
&lt;/ol>
&lt;p>So, I’ll take the original code as a starting point, and I’ll suggest different strategies to answer those questions. &lt;/p></description></item></channel></rss>