<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>composer on Carlos Buenosvinos</title><link>https://carlosbuenosvinos.com/tags/composer/</link><description>Recent content in composer on Carlos Buenosvinos</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2016 07:30:15 +0000</lastBuildDate><atom:link href="https://carlosbuenosvinos.com/tags/composer/index.xml" rel="self" type="application/rss+xml"/><item><title>Saved 500 Kbytes of autoload classmap with autoload-dev at @AtrapaloEng</title><link>https://carlosbuenosvinos.com/saved-500-kbytes-of-autoload-classmap-with-autoload-dev-at-atrapaloeng/</link><pubDate>Thu, 14 Apr 2016 07:30:15 +0000</pubDate><guid>https://carlosbuenosvinos.com/saved-500-kbytes-of-autoload-classmap-with-autoload-dev-at-atrapaloeng/</guid><description>&lt;p>This week, at Atrápalo, we have reviewed our autoloading Composer configuration to use PSR-4 and split production classmap from development classmap to save some space in our Opcache. The result, 500 Kbytes less. Let’s see some details.&lt;/p></description></item><item><title>Working at the same time in a project and its dependencies: Composer and path type repository</title><link>https://carlosbuenosvinos.com/working-at-the-same-time-in-a-project-and-its-dependencies-composer-and-path-type-repository/</link><pubDate>Thu, 24 Mar 2016 15:36:10 +0000</pubDate><guid>https://carlosbuenosvinos.com/working-at-the-same-time-in-a-project-and-its-dependencies-composer-and-path-type-repository/</guid><description>&lt;p>With the Domain-Driven Design, Microservices and API explosion, I see more teams working in a base project, such as a Web, and integrating other private packages they develop in a different repository. For example, working on the Web and an API client for a external REST service at the same time.&lt;/p>
&lt;p>For example, at @AtrapaloEng, our sales development team (checkout process, purchases, orders, payments, etc.) integrates different payment methods into the web so users, specially Latam ones, can be happier using their preferred payment methods. They create a repository for each of the new payment methods we support as a external package. Sometimes a developer in the team must work with different projects at the same time, the Web and the payment method in development.&lt;/p>
&lt;p>In this scenario, one option is work on the payment package, tag, push, go to the base project and update dependencies with Composer. As you can see, it’s a bit slower, how we can improve this process? Composer to the rescue!&lt;/p></description></item><item><title>Guía para el Desarrollo Profesional PHP (edición 2014)</title><link>https://carlosbuenosvinos.com/guia-para-el-desarrollo-profesional-php-edicion-2014/</link><pubDate>Wed, 21 Oct 2015 08:00:39 +0000</pubDate><guid>https://carlosbuenosvinos.com/guia-para-el-desarrollo-profesional-php-edicion-2014/</guid><description>&lt;p>Rascando por Youtube, encontré este vídeo de 2014, de una presentación que hice en LaSalle inspirada por &lt;!-- raw HTML omitted -->otra que hice en Castellón en 2011&lt;!-- raw HTML omitted -->. La idea es hacer un overview del ecosistema PHP y puntos importantes a la hora de montar un ciclo de desarrollo basado en esta tecnología. Que la disfrutéis.&lt;/p></description></item><item><title>Legacy Code and Teams Series: Composer</title><link>https://carlosbuenosvinos.com/legacy-code-and-teams-series-composer/</link><pubDate>Tue, 29 Jul 2014 07:00:23 +0000</pubDate><guid>https://carlosbuenosvinos.com/legacy-code-and-teams-series-composer/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>iPackagist, the Packagist Client for iPhone</title><link>https://carlosbuenosvinos.com/ipackagist-the-packagist-client-for-iphone/</link><pubDate>Mon, 01 Jul 2013 12:36:06 +0000</pubDate><guid>https://carlosbuenosvinos.com/ipackagist-the-packagist-client-for-iphone/</guid><description>&lt;p>&lt;strong>Packagist&lt;/strong> is a &lt;strong>Composer&lt;/strong> package repository. It aggregates all sorts of PHP packages that are installable with Composer. You can use Composer to manage your project or libraries’ dependencies. Read more at &lt;!-- raw HTML omitted -->&lt;a href="http://packagist.org%3C/a%3E">http://packagist.org&amp;lt;/a&amp;gt;&lt;/a>.&lt;/p>
&lt;p>**&lt;/p></description></item></channel></rss>