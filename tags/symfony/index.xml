<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symfony on Carlos Buenosvinos</title>
    <link>https://carlosbuenosvinos.github.io/tags/symfony/</link>
    <description>Recent content in symfony on Carlos Buenosvinos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Sep 2016 11:00:11 +0000</lastBuildDate>
    
	<atom:link href="https://carlosbuenosvinos.github.io/tags/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>“Domain-Driven Design in PHP” (@dddbook) is finished</title>
      <link>https://carlosbuenosvinos.github.io/domain-driven-design-in-php-book-is-finished/</link>
      <pubDate>Thu, 15 Sep 2016 11:00:11 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.github.io/domain-driven-design-in-php-book-is-finished/</guid>
      <description>&lt;p&gt;Today, Keyvan, Christian and me are very happy to announce that &lt;a href=&#34;https://leanpub.com/ddd-in-php&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Domain-Driven Design in PHP&amp;#8221;&lt;/a&gt; book is 100% complete. &lt;strong&gt;380 pages&lt;/strong&gt; and around &lt;strong&gt;1400 readers&lt;/strong&gt; so far.&lt;/p&gt;

&lt;h4 id=&#34;thanks&#34;&gt;Thanks&lt;/h4&gt;

&lt;p&gt;Thanks, thanks, thanks.&lt;/p&gt;

&lt;p&gt;Thanks to everyone that has supported us in this project.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Christian&lt;/strong&gt; and &lt;strong&gt;Keyvan&lt;/strong&gt;. We don&amp;#8217;t need words to understand each other.&lt;/p&gt;

&lt;p&gt;Thanks to our &lt;strong&gt;families&lt;/strong&gt; and &lt;strong&gt;friends&lt;/strong&gt;. Love is what you need to keep pushing.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Edd Mann&lt;/strong&gt; for helping at the beginning with the language implementation details ;).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Matthias Noback&lt;/strong&gt; for his suggestions and his foreword.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Vaughn Vernon&lt;/strong&gt; for being pragmatic and inspiring.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Ricard Clau, Albert Casademont, Victor Guardiola&lt;/strong&gt; and &lt;strong&gt;Jordi Abad&lt;/strong&gt; for your contributions.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;Natalye Childress&lt;/strong&gt; for non stopping asking about uppercase or lowercase. With your work, the book can be read.&lt;/p&gt;

&lt;p&gt;Thanks to everyone that committed fixes, you are great: &lt;strong&gt;Jonathan Wondrusch, César Rodríguez, Yannick Voyer, Oriol González, Henry Snoek, Tom Jowitt, Sascha Schimke, Sven Herrmann, Daniel Abad, Luis Rovirosa, Luis Cordova, Raúl Ramos, Juan Maturana, Nil Portugués, Nikolay Zujev, Fernando Pradas, Raúl Araya, Neal Brooks, Hubert Béague, Aleksander Rekść, Sebastian Machuca, Nicolas Oelgart, and Marc Aube.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying Symfony (and PHP) apps with Ansistrano</title>
      <link>https://carlosbuenosvinos.github.io/deploying-symfony-and-php-apps-with-ansistrano/</link>
      <pubDate>Tue, 20 Oct 2015 08:00:30 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.github.io/deploying-symfony-and-php-apps-with-ansistrano/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;For a long time, &lt;a href=&#34;http://capifony.org/&#34; target=&#34;_blank&#34;&gt;Capifony&lt;/a&gt; was, without any doubt, the facto option for deploying Symfony2 applications. Capifony is a ruby gem based in &lt;/span&gt;&lt;a href=&#34;https://github.com/capistrano/capistrano&#34; target=&#34;_blank&#34;&gt;Capistrano&lt;/a&gt; v2, an open source tool for running scripts on multiple servers with a deployment flow built-in. It’s primary use is for easily deploying applications. While it was built specifically for deploying &lt;a href=&#34;http://rubyonrails.org/&#34; target=&#34;_blank&#34;&gt;Rails&lt;/a&gt; apps, it’s pretty simple to customize it to deploy other types of applications. At that time, alternatives were shell scripting or Fabric. Now there&amp;#8217;s a better one, Ansistrano.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating progressively to Symfony without pain with StackPHP</title>
      <link>https://carlosbuenosvinos.github.io/migrating-progressively-to-symfony-without-pain-with-stackphp/</link>
      <pubDate>Tue, 28 Jul 2015 03:00:09 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.github.io/migrating-progressively-to-symfony-without-pain-with-stackphp/</guid>
      <description>&lt;p&gt;In the previous post, I talked about &lt;a href=&#34;http://carlosbuenosvinos.com/migrating-progressively-to-symfony-without-pain/&#34; target=&#34;_blank&#34;&gt;how to migrated to Symfony without pain using Apache Dumper&lt;/a&gt;. The idea was to generate Symfony routes in an Apache configuration file or .htaccess so it can be included in your virtual host. By including a fallback route to your current framework entry point, you can create new routes in Symfony without touching your previous framework. You can develop normally your new Symfony app, just defining new routes or the same old ones and regenerating the routes file.&lt;/p&gt;

&lt;p&gt;This approach has some small pitfalls. Each time a new Symfony route is created, the Apache configuration file with the routes must be regenerated. If you&amp;#8217;re creating many routes, this can be annoying. As explained in the previous post, there is another option that fixes this issue and have more features, &lt;a href=&#34;http://stackphp.com/&#34; target=&#34;_blank&#34;&gt;Stack&lt;/a&gt;. Now, it&amp;#8217;s like in &lt;a href=&#34;http://www.atrapalo.com&#34; target=&#34;_blank&#34;&gt;Atrápalo&lt;/a&gt;, let&amp;#8217;s see how it&amp;#8217;s working.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating progressively to Symfony without pain</title>
      <link>https://carlosbuenosvinos.github.io/migrating-progressively-to-symfony-without-pain/</link>
      <pubDate>Tue, 31 Mar 2015 09:47:18 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.github.io/migrating-progressively-to-symfony-without-pain/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.atrapalo.com&#34; target=&#34;_blank&#34;&gt;Atrápalo&lt;/a&gt; is a travel e-commerce website founded in 2000. Based in Barcelona, Spain, it sells flights, trips, tickets, booking restaurants, car renting, etc. to 10 different countries. It&amp;#8217;s a 9000 world Alexa ranking and it&amp;#8217;s running PHP. Since 2014, we are pushing hard in order to evolve technically using best practices, agile methodologies and distributed architectures. One of the key aspects is the framework.&lt;/p&gt;

&lt;p&gt;We are currently migrating to Symfony in order to speed up the development process and reduce the maintenance costs. We are doing it progressively, step by step, without rewriting the whole application, no green-field project, without any dedicated team neither. All developers are involved in this process, and by policy, each new feature is developed using Symfony while the old features remain served by the old framework.&lt;/p&gt;

&lt;p&gt;I would say this process is going quite smoothly, without pain. Based on some emails and tweets I have received, here are some tricks about how we are doing it. Hope it helps!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Remove non used PHP files in your project</title>
      <link>https://carlosbuenosvinos.github.io/remove-non-used-php-files-in-your-project/</link>
      <pubDate>Thu, 26 Sep 2013 07:40:56 +0000</pubDate>
      
      <guid>https://carlosbuenosvinos.github.io/remove-non-used-php-files-in-your-project/</guid>
      <description>&lt;p&gt;When a project gets bigger, specially when using a framework, it&amp;#8217;s mandatory to have some processes that help you in removing code that is not used anymore such as models, classes, template files, etc.&lt;/p&gt;

&lt;p&gt;That is not an easy task, however the benefits or removing non used coded are tons (code coverage, development speed, bugs, etc.). But what&amp;#8217;s the best approach to detect that a template file is not used anymore in your PHP project?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>